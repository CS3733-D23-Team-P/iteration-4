plugins {
    id 'application'
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id "io.freefair.lombok"
    id 'org.openjfx.javafxplugin' version '0.0.13'
}
mainClassName = 'edu.wpi.punchy_pegasi.Main'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://apisite.crmyers.dev/maven'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

javafx {
    version = "19"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.media']
}


dependencies {
    api 'io.github.typhon0:AnimateFX:1.2.4-SNAPSHOT'

    implementation(
            'io.github.palexdev:materialfx:11.15.0',
            'net.kurobako:gesturefx:0.7.1',
            'org.controlsfx:controlsfx:11.1.2',

            'org.apache.lucene:lucene-core:9.5.0',
            'org.apache.lucene:lucene-analysis-common:9.5.0',
            'org.apache.lucene:lucene-queryparser:9.5.0',

            'org.javatuples:javatuples:1.2',
            'org.jetbrains:annotations:24.0.0',
            'org.apache.commons:commons-collections4:4.4',

            'org.slf4j:slf4j-api:2.0.5',
            'org.apache.logging.log4j:log4j-api:2.20.0',
            'org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0',
            'org.apache.logging.log4j:log4j-core:2.20.0',

            'com.oracle.database.jdbc:ucp:21.9.0.0',
            'com.oracle.database.jdbc:ojdbc8:21.9.0.0',

            'com.impossibl.pgjdbc-ng:pgjdbc-ng:0.8.9',
            'com.jsoniter:jsoniter:0.9.23',

            'de.mkammerer:argon2-jvm:2.11',
            'com.github.hervegirod:fxsvgimage:1.1',
            'com.github.phoenicisorg:javafx-collections:1.2.5',
            'net.java.dev.jna:jna:5.12.1',

            'net.sf.sociaal:freetts:1.2.2',

            'com.fazecast:jSerialComm:[2.0.0,3.0.0)'

    )
    implementation project(path: ':generator')

    String javaFxVersion = "19"
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac-aarch64'


    testImplementation(
            "org.testfx:testfx-core:4.0.16-alpha",
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha',
//            'com.oracle.ojdbc:ojdbc10:19.3.0.0',
    )

}


test {
    useJUnitPlatform()
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': mainClassName
    }

}

def codeCoverageExcludes = [
        'edu.wpi.teamname.App',
        'edu.wpi.teamname.Main',
]

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
compileJava.dependsOn 'spotlessApply'

tasks.withType(Jar).all {
    duplicatesStrategy 'exclude'
}
